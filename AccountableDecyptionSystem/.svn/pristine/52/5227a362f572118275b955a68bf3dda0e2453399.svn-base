package blockchain;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class Database {
	/*
	 * This class makes a connection to the database.
	 * @return conn, the connection that to the the database
	 */
	public static Connection getConnection() throws SQLException{
		try { 

			Class.forName("org.postgresql.Driver").newInstance();
		}
		catch(ClassNotFoundException e) {
			System.out.println("Error: unable to load driver class!");
			System.exit(1);
		}
		catch(IllegalAccessException ex) {
			System.out.println("Error: access problem while loading!");
			System.exit(2);
		}
		catch(InstantiationException ex) {
			System.out.println("Error: unable to instantiate driver!");
			System.exit(3);
		} 
		Connection conn = null;
		try {
			conn = DriverManager.getConnection("jdbc:postgresql://mod-fund-databases.cs.bham.ac.uk/", "dxf695", "5tfn4636np");
		} catch (SQLException ex) {
			ex.printStackTrace();
		}

		return conn;

	}

	public static int getPowOf2(int numEntries){
		if(numEntries ==0) return 0;
		if(numEntries ==1){
			return 1;
		}
		int biggestSoFar = 2;
		for(int i = 2;i<=numEntries;i=i*2){
			biggestSoFar = i;
		}
		if(biggestSoFar!=numEntries){
			return biggestSoFar*2;
		}else{
			return biggestSoFar;
		}
	}

	public static void insertNode(Connection conn,String entry) throws SQLException{
		//find current size of tree

		PreparedStatement getCurrentSize = conn.prepareStatement("SELECT MAX(size_when_created) FROM Tree");
		ResultSet sizeSet = getCurrentSize.executeQuery();sizeSet.next();
		int currentSize = sizeSet.getInt(1);

		//add to log
		PreparedStatement insertIntoLog = conn.prepareStatement("INSERT INTO Log(leaf_value,index) VALUES(?,?)");
		insertIntoLog.setString(1, entry);insertIntoLog.setInt(2, currentSize);//index 1 less
		insertIntoLog.executeUpdate();

		//add to tree

		PreparedStatement getRoot = conn.prepareStatement("SELECT * FROM roots ORDER BY size DESC LIMIT 1");
		ResultSet root = getRoot.executeQuery();

		PreparedStatement getNode = conn.prepareStatement("SELECT * FROM Tree WHERE node = ?");
		PreparedStatement getNode1 = conn.prepareStatement("SELECT * FROM Tree WHERE node = ?");

		PreparedStatement getParent = conn.prepareStatement("SELECT * FROM Tree WHERE right_child = ? ORDER BY size_when_created DESC");
		PreparedStatement getParent1 = conn.prepareStatement("SELECT * FROM Tree WHERE right_child = ? ORDER BY size_when_created DESC");

		PreparedStatement insertIntoTree = conn.prepareStatement("INSERT INTO Tree (node,left_child,right_child,size_when_created) VALUES(?,?,?,?)");
		PreparedStatement insertIntoRoots = conn.prepareStatement("INSERT INTO Roots(RTH,size) VALUES(?,?)");

		String inserting;

		//case size = pow of 2
		if(currentSize == getPowOf2(currentSize)){
			String newRoot;
			if(!root.isBeforeFirst()){//if tree is empty insert directly
				newRoot = entry;
				inserting = newRoot;
				insertIntoTree.setString(1, newRoot);
				insertIntoTree.setNull(2, java.sql.Types.VARCHAR);
				insertIntoTree.setNull(3, java.sql.Types.VARCHAR);
				insertIntoTree.setInt(4, currentSize+1);
				insertIntoTree.executeUpdate();

				inserting = newRoot;

				insertIntoRoots.setString(1, entry);
				insertIntoRoots.setInt(2, currentSize+1);
				insertIntoRoots.executeUpdate();
			}else{
				root.next();
				newRoot = TreeOps.hash(root.getString(1).concat(entry));


				//create new root node
				inserting = newRoot;

				insertIntoTree.setString(1, newRoot);
				insertIntoTree.setString(2, root.getString(1));
				insertIntoTree.setString(3, entry);
				insertIntoTree.setInt(4, currentSize+1);
				insertIntoTree.executeUpdate();

				inserting = newRoot;

				//				insertIntoRoots.setString(1, newRoot);
				//				insertIntoRoots.setInt(2, currentSize+1);
				//				insertIntoRoots.executeUpdate();

				//create new leaf
				inserting = entry;

				insertIntoTree.setString(1, entry);
				insertIntoTree.setNull(2, java.sql.Types.VARCHAR);
				insertIntoTree.setNull(3, java.sql.Types.VARCHAR);
				insertIntoTree.setInt(4, currentSize+1);
				insertIntoTree.executeUpdate();
			}
			//case size not pow of 2
			//get maxPowOf2() of root
			//get right child
			//if so: create new node where left is old node and right is the new entry. inert new entry with this as parent
			//if not:update moxPowOf2() get right child. repeat
		}else{
			root.next();
			getNode.setString(1, root.getString(1));

			ResultSet node = getNode.executeQuery();
			if(node.isBeforeFirst()){//if tree is not empty
				node.next();
				int size_thing = node.getInt(4);
				while(node.getString(2) != null && node.getString(3)!= null){//while the node is not a leaf
					int currentPowOf2 = getPowOf2(node.getInt(4));
					String right = node.getString(3);
					String left = node.getString(2);
					String value = node.getString(1);
					getNode1.setString(1, right);
					ResultSet rightChild = getNode1.executeQuery();rightChild.next();
					String rightR= rightChild.getString(3);String leftR = rightChild.getString(2);String valueR = rightChild.getString(1);

					//check if right child full
					if(rightChild.getInt(4)-currentPowOf2/2 ==getPowOf2(rightChild.getInt(4)-currentPowOf2/2) || rightChild.getString(2)==null){
						//insert leaf
						inserting = entry;
						insertIntoTree.setString(1, entry);
						insertIntoTree.setNull(2, java.sql.Types.VARCHAR);
						insertIntoTree.setNull(3, java.sql.Types.VARCHAR);
						insertIntoTree.setInt(4, currentSize+1);
						insertIntoTree.executeUpdate();


						//find parent of old right child i.e. new left child
						getParent.setString(1,valueR);
						ResultSet parentOfOldRight = getParent.executeQuery();
						String newRight = value;
						while(parentOfOldRight.isBeforeFirst()){//update parent nodes
							parentOfOldRight.next();

							String oldParent = parentOfOldRight.getString(1);
							String oldLeft = parentOfOldRight.getString(2);
							String newParent = TreeOps.hash(oldLeft.concat(newRight));
							insertIntoTree.setString(1,newParent);
							insertIntoTree.setString(2, oldLeft);
							insertIntoTree.setString(3, newRight);
							insertIntoTree.setInt(4, currentSize+1);
							insertIntoTree.executeUpdate();
							
							getParent.setString(1, oldParent);
							parentOfOldRight = getParent.executeQuery();
							
						}

//						//find new intermidiate hash of l&r
//						String intermidiateHash = TreeOps.hash(valueR.concat(entry));
//						//create intermediate node
//						insertIntoTree.setString(1,intermidiateHash);
//						insertIntoTree.setString(2, valueR);
//						insertIntoTree.setString(3, entry);
//						insertIntoTree.setInt(4, currentSize+1);
//						insertIntoTree.executeUpdate();
//						//change R of parent of right child to the new intermidiate hash
//
//						insertIntoTree.setString(1, TreeOps.hash(parentOfOldRight.getString(2).concat(intermidiateHash)));
//						insertIntoTree.setString(2, parentOfOldRight.getString(2));
//						insertIntoTree.setString(3, intermidiateHash);
//						insertIntoTree.setInt(4, currentSize+1);
//						insertIntoTree.executeUpdate();


						//						//insert intemidiate hash node
						//						inserting = TreeOps.hash(rightChild.getString(1).concat(entry));
						//						String rightCHild = rightChild.getString(1);
						//						insertIntoTree.setString(1, TreeOps.hash(rightChild.getString(1).concat(entry)));
						//						insertIntoTree.setString(2, rightChild.getString(1));
						//						insertIntoTree.setString(3, entry);
						//						insertIntoTree.setInt(4, currentSize+1);
						//						insertIntoTree.executeUpdate();
						//						
						//						
						//		//				parent
						//
						//						right = inserting;
						//						String val = TreeOps.hash(left.concat(right));
						//						insertIntoTree.setString(1, val);
						//						insertIntoTree.setString(2, left);
						//						insertIntoTree.setString(3, right);
						//						insertIntoTree.setInt(4, currentSize+1);
						//						insertIntoTree.executeUpdate();

						break;
					}
					node = rightChild;



				}




			}
		}
		//update hashes
		getParent.setString(1, entry);
		ResultSet node = getParent.executeQuery();
		//		if(node.isBeforeFirst()){
		while(node.isBeforeFirst()){//while not the root
			node.next();
			String parent = node.getString(1);
			//get node where right child == rightChild
			//duplicate node with new hash and set right child to this new hash
			inserting = TreeOps.hash(node.getString(2).concat(node.getString(3)));

			insertIntoTree.setString(1,TreeOps.hash(node.getString(2).concat(node.getString(3))));
			insertIntoTree.setString(2, node.getString(2));
			insertIntoTree.setString(3, node.getString(3));
			insertIntoTree.setInt(4, currentSize+1);
			insertIntoTree.executeUpdate();



			getParent1.setString(1, node.getString(1));
			ResultSet nextNode = getParent1.executeQuery();
			if(!nextNode.isBeforeFirst()){
				insertIntoRoots.setString(1, parent);
				insertIntoRoots.setInt(2, currentSize+1);
				insertIntoRoots.executeUpdate();
			}
			node = nextNode;
			//				nodesSet.next();
		}

		//			//update root
		//			inserting  = TreeOps.hash(node.getString(2).concat(node.getString(3)));
		//			insertIntoTree.setString(1,TreeOps.hash(node.getString(2).concat(node.getString(3))));
		//			insertIntoTree.setString(2, node.getString(2));
		//			insertIntoTree.setString(3, node.getString(3));
		//			insertIntoTree.setInt(4, currentSize+1);
		//			insertIntoTree.executeUpdate();
		//			inserting = node.getString(1);
		//			insertIntoRoots.setString(1,node.getString(1) );
		//			insertIntoRoots.setInt(2, currentSize+1);
		//			insertIntoRoots.executeUpdate();




		//update parents
		//start at inserted node
		//while parent != null
		//node = parent
		//node = hash(L||R)

	}
	
	
	public static void insertEntry(Connection conn,String entry) throws SQLException{
		//get current size
		PreparedStatement getCurrentSize = conn.prepareStatement("SELECT MAX(size_when_created) FROM Tree");
		ResultSet sizeSet = getCurrentSize.executeQuery();sizeSet.next();
		int currentSize = sizeSet.getInt(1);
		
		PreparedStatement insertIntoLog = conn.prepareStatement("INSERT INTO Log(leaf_value,index) VALUES(?,?)");
		insertIntoLog.setString(1, entry);insertIntoLog.setInt(2, currentSize);//index 1 less
		insertIntoLog.executeUpdate();
		
		PreparedStatement getRoot = conn.prepareStatement("SELECT * FROM roots ORDER BY size DESC LIMIT 1");
		PreparedStatement getNode = conn.prepareStatement("SELECT * FROM Tree WHERE node = ?");
		PreparedStatement getParent = conn.prepareStatement("SELECT * FROM Tree WHERE right_child = ? or left_child = ? ORDER BY size_when_created DESC");
		PreparedStatement insertIntoTree = conn.prepareStatement("INSERT INTO Tree (node,left_child,right_child,size_when_created) VALUES(?,?,?,?)");
		PreparedStatement insertIntoRoots = conn.prepareStatement("INSERT INTO Roots(RTH,size) VALUES(?,?)");
		
		ResultSet root = getRoot.executeQuery();
		//empty tree
		if(!root.isBeforeFirst()){
			insertIntoRoots.setString(1,entry);
			insertIntoRoots.setInt(2,currentSize+1);
			insertIntoRoots.executeUpdate();
			
			insertIntoTree.setString(1,entry);
			insertIntoTree.setNull(2, java.sql.Types.VARCHAR);
			insertIntoTree.setNull(3, java.sql.Types.VARCHAR);
			insertIntoTree.setInt(4, currentSize+1);
			insertIntoTree.executeUpdate();
			return;

		}
		root.next();
		getNode.setString(1, root.getString(1));
		ResultSet node = getNode.executeQuery();//root
		int nodeSize = currentSize;
		//while not past the end
		while(node.isBeforeFirst()){
			node.next();
			//if node symetric
			if(nodeSize == getPowOf2(nodeSize)){
				//take root as left, value as right, hash together create node
				String oldValue = node.getString(1);
				String newValue = TreeOps.hash(oldValue.concat(entry));
				getParent.setString(1, oldValue);
				getParent.setString(2, oldValue);
				
				ResultSet parent = getParent.executeQuery();
				
				insertIntoTree.setString(1,newValue);
				insertIntoTree.setString(2, oldValue);
				insertIntoTree.setString(3, entry);
				insertIntoTree.setInt(4, currentSize+1);
				insertIntoTree.executeUpdate();
				//insert leaf
				insertIntoTree.setString(1,entry);
				insertIntoTree.setNull(2, java.sql.Types.VARCHAR);
				insertIntoTree.setNull(3, java.sql.Types.VARCHAR);
				insertIntoTree.setInt(4, currentSize+1);
				insertIntoTree.executeUpdate();
				
				
				//loop till no parent
				String newHash;
				if(node.getString(2)==null){
					 newHash =TreeOps.hash(node.getString(1).concat(entry));

				}else{
					 newHash = TreeOps.hash(node.getString(2).concat(node.getString(3)));
				}
				while(parent.isBeforeFirst()){
					parent.next();
					newHash = TreeOps.hash(parent.getString(2).concat(newValue));
					insertIntoTree.setString(1,newHash);
					insertIntoTree.setString(2, parent.getString(2));
					insertIntoTree.setString(3, newValue);
					insertIntoTree.setInt(4, currentSize+1);
					insertIntoTree.executeUpdate();
					
					oldValue = parent.getString(1);
					newValue = newHash;
					getParent.setString(1, oldValue);
					getParent.setString(2, oldValue);

					parent = getParent.executeQuery();
				}
				insertIntoRoots.setString(1,newValue);
				insertIntoRoots.setInt(2,currentSize+1);
				insertIntoRoots.executeUpdate();
				break;
				//get parent of old root, update that right node
				//node = parent of old root
				
			}
			//asymetric
			else{
				getNode.setString(1, node.getString(3));
				node = getNode.executeQuery();
				
				
				nodeSize -= getPowOf2(nodeSize)/2;
			}
			
		}
		
		//if node is symetric 
		
		//if node not symetric
			//node = right value
		
		
		

		
		
	}
	
	
	
	
	
	
}
